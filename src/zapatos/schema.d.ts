/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v3.5.0), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';
  import type * as c from 'zapatos/custom';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 101 }

  /* === schema: public === */

  /* --- enums --- */


  /* --- tables --- */

  export namespace comments {
    export type Table = 'comments';
    export interface Selectable {
      /**
      * **comments.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('comments_id_seq'::regclass)`
      */
      id: number;
      /**
      * **comments.post_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      post_id: number;
      /**
      * **comments.body**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      body: string;
      /**
      * **comments.author**
      * - `varchar` in database
      * - Nullable, no default
      */
      author: string | null;
      /**
      * **comments.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
    }
    export interface JSONSelectable {
      /**
      * **comments.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('comments_id_seq'::regclass)`
      */
      id: number;
      /**
      * **comments.post_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      post_id: number;
      /**
      * **comments.body**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      body: string;
      /**
      * **comments.author**
      * - `varchar` in database
      * - Nullable, no default
      */
      author: string | null;
      /**
      * **comments.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.DateString;
    }
    export interface Whereable {
      /**
      * **comments.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('comments_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **comments.post_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      post_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **comments.body**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      body?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **comments.author**
      * - `varchar` in database
      * - Nullable, no default
      */
      author?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **comments.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **comments.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('comments_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **comments.post_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      post_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **comments.body**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      body: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **comments.author**
      * - `varchar` in database
      * - Nullable, no default
      */
      author?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **comments.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **comments.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('comments_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **comments.post_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      post_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **comments.body**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      body?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **comments.author**
      * - `varchar` in database
      * - Nullable, no default
      */
      author?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **comments.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'comments_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace schema_migrations {
    export type Table = 'schema_migrations';
    export interface Selectable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version: string;
    }
    export interface JSONSelectable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version: string;
    }
    export interface Whereable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'schema_migrations_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace subscriptions {
    export type Table = 'subscriptions';
    export interface Selectable {
      /**
      * **subscriptions.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('subscriptions_id_seq'::regclass)`
      */
      id: number;
      /**
      * **subscriptions.subscribed_on**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      subscribed_on: Date;
      /**
      * **subscriptions.user_id**
      * - `int4` in database
      * - Nullable, no default
      */
      user_id: number | null;
    }
    export interface JSONSelectable {
      /**
      * **subscriptions.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('subscriptions_id_seq'::regclass)`
      */
      id: number;
      /**
      * **subscriptions.subscribed_on**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      subscribed_on: db.DateString;
      /**
      * **subscriptions.user_id**
      * - `int4` in database
      * - Nullable, no default
      */
      user_id: number | null;
    }
    export interface Whereable {
      /**
      * **subscriptions.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('subscriptions_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **subscriptions.subscribed_on**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      subscribed_on?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **subscriptions.user_id**
      * - `int4` in database
      * - Nullable, no default
      */
      user_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **subscriptions.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('subscriptions_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **subscriptions.subscribed_on**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      subscribed_on?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment;
      /**
      * **subscriptions.user_id**
      * - `int4` in database
      * - Nullable, no default
      */
      user_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **subscriptions.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('subscriptions_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **subscriptions.subscribed_on**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      subscribed_on?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.DefaultType | db.SQLFragment>;
      /**
      * **subscriptions.user_id**
      * - `int4` in database
      * - Nullable, no default
      */
      user_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'subscriptions_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace users {
    export type Table = 'users';
    export interface Selectable {
      /**
      * **users.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('users_id_seq'::regclass)`
      */
      id: number;
      /**
      * **users.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **users.password**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      password: string;
      /**
      * **users.email**
      * - `domain_email` (base type: `citext`) in database
      * - `NOT NULL`, no default
      */
      email: c.PgDomain_email;
      /**
      * **users.created_at**
      * - `timestamp` in database
      * - Nullable, default: `now()`
      */
      created_at: Date | null;
      /**
      * **users.updated_at**
      * - `timestamp` in database
      * - Nullable, default: `now()`
      */
      updated_at: Date | null;
      /**
      * **users.subscriber**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      subscriber: boolean;
    }
    export interface JSONSelectable {
      /**
      * **users.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('users_id_seq'::regclass)`
      */
      id: number;
      /**
      * **users.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **users.password**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      password: string;
      /**
      * **users.email**
      * - `domain_email` (base type: `citext`) in database
      * - `NOT NULL`, no default
      */
      email: c.PgDomain_email;
      /**
      * **users.created_at**
      * - `timestamp` in database
      * - Nullable, default: `now()`
      */
      created_at: db.DateString | null;
      /**
      * **users.updated_at**
      * - `timestamp` in database
      * - Nullable, default: `now()`
      */
      updated_at: db.DateString | null;
      /**
      * **users.subscriber**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      subscriber: boolean;
    }
    export interface Whereable {
      /**
      * **users.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('users_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.password**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      password?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.email**
      * - `domain_email` (base type: `citext`) in database
      * - `NOT NULL`, no default
      */
      email?: c.PgDomain_email | db.Parameter<c.PgDomain_email> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgDomain_email | db.Parameter<c.PgDomain_email> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.created_at**
      * - `timestamp` in database
      * - Nullable, default: `now()`
      */
      created_at?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.updated_at**
      * - `timestamp` in database
      * - Nullable, default: `now()`
      */
      updated_at?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.subscriber**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      subscriber?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **users.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('users_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **users.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **users.password**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      password: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **users.email**
      * - `domain_email` (base type: `citext`) in database
      * - `NOT NULL`, no default
      */
      email: c.PgDomain_email | db.Parameter<c.PgDomain_email> | db.SQLFragment;
      /**
      * **users.created_at**
      * - `timestamp` in database
      * - Nullable, default: `now()`
      */
      created_at?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **users.updated_at**
      * - `timestamp` in database
      * - Nullable, default: `now()`
      */
      updated_at?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **users.subscriber**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      subscriber?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **users.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('users_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **users.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **users.password**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      password?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **users.email**
      * - `domain_email` (base type: `citext`) in database
      * - `NOT NULL`, no default
      */
      email?: c.PgDomain_email | db.Parameter<c.PgDomain_email> | db.SQLFragment | db.SQLFragment<any, c.PgDomain_email | db.Parameter<c.PgDomain_email> | db.SQLFragment>;
      /**
      * **users.created_at**
      * - `timestamp` in database
      * - Nullable, default: `now()`
      */
      created_at?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **users.updated_at**
      * - `timestamp` in database
      * - Nullable, default: `now()`
      */
      updated_at?: (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (Date | db.DateString) | db.Parameter<(Date | db.DateString)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **users.subscriber**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      subscriber?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'users_email_key' | 'users_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* === cross-table types === */

  export type Table = comments.Table | schema_migrations.Table | subscriptions.Table | users.Table;
  export type Selectable = comments.Selectable | schema_migrations.Selectable | subscriptions.Selectable | users.Selectable;
  export type JSONSelectable = comments.JSONSelectable | schema_migrations.JSONSelectable | subscriptions.JSONSelectable | users.JSONSelectable;
  export type Whereable = comments.Whereable | schema_migrations.Whereable | subscriptions.Whereable | users.Whereable;
  export type Insertable = comments.Insertable | schema_migrations.Insertable | subscriptions.Insertable | users.Insertable;
  export type Updatable = comments.Updatable | schema_migrations.Updatable | subscriptions.Updatable | users.Updatable;
  export type UniqueIndex = comments.UniqueIndex | schema_migrations.UniqueIndex | subscriptions.UniqueIndex | users.UniqueIndex;
  export type Column = comments.Column | schema_migrations.Column | subscriptions.Column | users.Column;
  export type AllTables = [comments.Table, schema_migrations.Table, subscriptions.Table, users.Table];
  export type AllMaterializedViews = [];


  export type SelectableForTable<T extends Table> = {
    comments: comments.Selectable;
    schema_migrations: schema_migrations.Selectable;
    subscriptions: subscriptions.Selectable;
    users: users.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    comments: comments.JSONSelectable;
    schema_migrations: schema_migrations.JSONSelectable;
    subscriptions: subscriptions.JSONSelectable;
    users: users.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    comments: comments.Whereable;
    schema_migrations: schema_migrations.Whereable;
    subscriptions: subscriptions.Whereable;
    users: users.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    comments: comments.Insertable;
    schema_migrations: schema_migrations.Insertable;
    subscriptions: subscriptions.Insertable;
    users: users.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    comments: comments.Updatable;
    schema_migrations: schema_migrations.Updatable;
    subscriptions: subscriptions.Updatable;
    users: users.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    comments: comments.UniqueIndex;
    schema_migrations: schema_migrations.UniqueIndex;
    subscriptions: subscriptions.UniqueIndex;
    users: users.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    comments: comments.Column;
    schema_migrations: schema_migrations.Column;
    subscriptions: subscriptions.Column;
    users: users.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    comments: comments.SQL;
    schema_migrations: schema_migrations.SQL;
    subscriptions: subscriptions.SQL;
    users: users.SQL;
  }[T];

}
